// models/hall/category_model.dart

import 'package:flutter/foundation.dart';
import '../../core/constants/firebase_constants.dart';
import '../../core/constants/app_constants.dart';
import '../../core/utils/validators.dart';
import '../../core/utils/date_utils.dart';
import '../../core/utils/id_generator.dart';
import '../../core/extensions/string_extension.dart';

/// Hall category model for organizing halls by type
class CategoryModel {
  final String categoryId;
  final String name;
  final String nameArabic;
  final String? description;
  final String? descriptionArabic;
  final String iconUrl;
  final String? imageUrl;
  final bool isActive;
  final int order;
  final DateTime createdAt;
  final DateTime updatedAt;
  final CategoryStatistics? statistics;

  CategoryModel({
    required this.categoryId,
    required this.name,
    required this.nameArabic,
    this.description,
    this.descriptionArabic,
    required this.iconUrl,
    this.imageUrl,
    this.isActive = true,
    this.order = 0,
    DateTime? createdAt,
    DateTime? updatedAt,
    this.statistics,
  }) :
        createdAt = createdAt ?? DateTime.now(),
        updatedAt = updatedAt ?? DateTime.now();

  // ========== Factory Constructors ==========

  /// Create from Firestore document
  factory CategoryModel.fromJson(Map<String, dynamic> json) {
    try {
      return CategoryModel(
        categoryId: json[FirebaseConstants.categoryIdField] as String,
        name: json[FirebaseConstants.nameField] as String,
        nameArabic: json[FirebaseConstants.nameArabicField] as String,
        description: json[FirebaseConstants.descriptionField] as String?,
        descriptionArabic: json[FirebaseConstants.descriptionArabicField] as String?,
        iconUrl: json[FirebaseConstants.iconField] as String,
        imageUrl: json['imageUrl'] as String?,
        isActive: json[FirebaseConstants.isActiveField] as bool? ?? true,
        order: json[FirebaseConstants.orderField] as int? ?? 0,
        createdAt: DateUtils.parseISODate(json[FirebaseConstants.createdAtField] as String?) ?? DateTime.now(),
        updatedAt: DateUtils.parseISODate(json[FirebaseConstants.updatedAtField] as String?) ?? DateTime.now(),
        statistics: json['statistics'] != null
            ? CategoryStatistics.fromJson(json['statistics'] as Map<String, dynamic>)
            : null,
      );
    } catch (e) {
      debugPrint('Error parsing CategoryModel from JSON: $e');
      rethrow;
    }
  }

  /// Create new category
  factory CategoryModel.createNew({
    required String name,
    required String nameArabic,
    required String iconUrl,
    String? description,
    String? descriptionArabic,
    String? imageUrl,
    int order = 0,
  }) {
    return CategoryModel(
      categoryId: '', // Will be generated by service
      name: name,
      nameArabic: nameArabic,
      description: description,
      descriptionArabic: descriptionArabic,
      iconUrl: iconUrl,
      imageUrl: imageUrl,
      order: order,
    );
  }

  /// Create default categories for initial setup
  static List<CategoryModel> createDefaultCategories() {
    return [
      CategoryModel.createNew(
        name: 'Wedding Halls',
        nameArabic: 'قاعات الأفراح',
        iconUrl: 'assets/icons/wedding.svg',
        description: 'Elegant halls perfect for wedding celebrations',
        descriptionArabic: 'قاعات أنيقة مثالية لحفلات الزفاف',
        order: 1,
      ),
      CategoryModel.createNew(
        name: 'Corporate Events',
        nameArabic: 'الفعاليات الشركات',
        iconUrl: 'assets/icons/corporate.svg',
        description: 'Professional venues for business meetings and conferences',
        descriptionArabic: 'أماكن احترافية للاجتماعات والمؤتمرات التجارية',
        order: 2,
      ),
      CategoryModel.createNew(
        name: 'Birthday Parties',
        nameArabic: 'حفلات أعياد الميلاد',
        iconUrl: 'assets/icons/birthday.svg',
        description: 'Fun spaces for birthday celebrations',
        descriptionArabic: 'أماكن ممتعة لحفلات أعياد الميلاد',
        order: 3,
      ),
      CategoryModel.createNew(
        name: 'Cultural Events',
        nameArabic: 'الفعاليات الثقافية',
        iconUrl: 'assets/icons/cultural.svg',
        description: 'Venues for cultural and traditional events',
        descriptionArabic: 'أماكن للفعاليات الثقافية والتراثية',
        order: 4,
      ),
      CategoryModel.createNew(
        name: 'Sports Events',
        nameArabic: 'الفعاليات الرياضية',
        iconUrl: 'assets/icons/sports.svg',
        description: 'Facilities for sports tournaments and activities',
        descriptionArabic: 'مرافق للبطولات والأنشطة الرياضية',
        order: 5,
      ),
      CategoryModel.createNew(
        name: 'Exhibitions',
        nameArabic: 'المعارض',
        iconUrl: 'assets/icons/exhibition.svg',
        description: 'Spacious venues for exhibitions and trade shows',
        descriptionArabic: 'أماكن واسعة للمعارض والعروض التجارية',
        order: 6,
      ),
    ];
  }

  // ========== JSON Conversion ==========

  Map<String, dynamic> toJson() {
    return {
      FirebaseConstants.categoryIdField: categoryId,
      FirebaseConstants.nameField: name,
      FirebaseConstants.nameArabicField: nameArabic,
      FirebaseConstants.descriptionField: description,
      FirebaseConstants.descriptionArabicField: descriptionArabic,
      FirebaseConstants.iconField: iconUrl,
      'imageUrl': imageUrl,
      FirebaseConstants.isActiveField: isActive,
      FirebaseConstants.orderField: order,
      FirebaseConstants.createdAtField: DateUtils.toISOString(createdAt),
      FirebaseConstants.updatedAtField: DateUtils.toISOString(updatedAt),
      'statistics': statistics?.toJson(),
    };
  }

  // ========== Validation ==========

  List<String> validate() {
    final errors = <String>[];

    // Validate category ID
    if (categoryId.isNotEmpty && !categoryId.startsWith('CAT_')) {
      errors.add('Invalid category ID format');
    }

    // Validate name
    final nameValidation = Validators.validateName(name, fieldName: 'Category name');
    if (nameValidation != null) {
      errors.add(nameValidation);
    }

    // Validate Arabic name
    final arabicNameValidation = Validators.validateArabicName(nameArabic, fieldName: 'Arabic category name');
    if (arabicNameValidation != null) {
      errors.add(arabicNameValidation);
    }

    // Validate icon URL
    if (iconUrl.isEmpty) {
      errors.add('Category icon is required');
    } else {
      final iconValidation = Validators.validateUrl(iconUrl, isRequired: true);
      if (iconValidation != null) {
        errors.add('Invalid icon URL: $iconValidation');
      }
    }

    // Validate image URL if provided
    if (imageUrl != null && imageUrl!.isNotEmpty) {
      final imageValidation = Validators.validateUrl(imageUrl!, isRequired: false);
      if (imageValidation != null) {
        errors.add('Invalid image URL: $imageValidation');
      }
    }

    // Validate description if provided
    if (description != null) {
      final descValidation = Validators.validateDescription(description, fieldName: 'Description', isRequired: false);
      if (descValidation != null) {
        errors.add(descValidation);
      }
    }

    return errors;
  }

  bool get isValid => validate().isEmpty;

  // ========== Computed Properties ==========

  /// Get category name in preferred language
  String getDisplayName(String? languageCode) {
    final isArabic = languageCode == 'ar';
    return isArabic ? nameArabic : name;
  }

  /// Get category description in preferred language
  String? getDisplayDescription(String? languageCode) {
    final isArabic = languageCode == 'ar';
    if (isArabic && descriptionArabic?.isNotEmpty == true) {
      return descriptionArabic;
    }
    return description;
  }

  /// Get hall count in this category
  int get hallCount => statistics?.totalHalls ?? 0;

  /// Get active hall count in this category
  int get activeHallCount => statistics?.activeHalls ?? 0;

  /// Get popularity score based on statistics
  double get popularityScore {
    if (statistics == null) return 0.0;

    final stats = statistics!;

    // Calculate score based on multiple factors
    double score = 0.0;

    // Number of halls (weight: 30%)
    score += (stats.totalHalls * 0.3);

    // Total bookings (weight: 40%)
    score += (stats.totalBookings * 0.4);

    // Average rating (weight: 20%)
    score += (stats.averageRating * 0.2 * 20); // Multiply by 20 to scale rating (1-5) to similar range

    // Recent activity (weight: 10%)
    if (stats.lastBookingDate != null) {
      final daysSinceLastBooking = DateTime.now().difference(stats.lastBookingDate!).inDays;
      final recentActivityScore = (30 - daysSinceLastBooking.clamp(0, 30)) / 30 * 10;
      score += recentActivityScore;
    }

    return score;
  }

  /// Check if category is popular
  bool get isPopular => popularityScore > 50.0;

  /// Check if category has recent activity
  bool get hasRecentActivity {
    if (statistics?.lastBookingDate == null) return false;
    final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7));
    return statistics!.lastBookingDate!.isAfter(sevenDaysAgo);
  }

  /// Get trend status
  CategoryTrend get trend {
    if (statistics == null) return CategoryTrend.stable;

    final stats = statistics!;
    if (stats.lastMonthBookings > stats.previousMonthBookings) {
      return CategoryTrend.growing;
    } else if (stats.lastMonthBookings < stats.previousMonthBookings) {
      return CategoryTrend.declining;
    }
    return CategoryTrend.stable;
  }

  /// Get trend display
  String getTrendDisplay(String? languageCode) {
    final isArabic = languageCode == 'ar';

    switch (trend) {
      case CategoryTrend.growing:
        return isArabic ? 'متزايد' : 'Growing';
      case CategoryTrend.declining:
        return isArabic ? 'متراجع' : 'Declining';
      case CategoryTrend.stable:
        return isArabic ? 'مستقر' : 'Stable';
    }
  }

  /// Get category statistics summary
  String getStatisticsSummary(String? languageCode) {
    final isArabic = languageCode == 'ar';

    if (statistics == null) {
      return isArabic ? 'لا توجد إحصائيات' : 'No statistics available';
    }

    final stats = statistics!;

    if (isArabic) {
      return '${stats.totalHalls} قاعة، ${stats.totalBookings} حجز';
    } else {
      return '${stats.totalHalls} hall${stats.totalHalls != 1 ? 's' : ''}, ${stats.totalBookings} booking${stats.totalBookings != 1 ? 's' : ''}';
    }
  }

  // ========== Search & Filter Methods ==========

  /// Check if category matches search query
  bool matchesSearchQuery(String query) {
    final normalizedQuery = query.toSearchFormat;

    return name.toSearchFormat.containsQuery(normalizedQuery) ||
        nameArabic.toSearchFormat.containsQuery(normalizedQuery) ||
        (description?.toSearchFormat.containsQuery(normalizedQuery) ?? false) ||
        (descriptionArabic?.toSearchFormat.containsQuery(normalizedQuery) ?? false);
  }

  /// Get search keywords for this category
  List<String> get searchKeywords {
    final keywords = <String>[];

    keywords.add(name.toLowerCase());
    keywords.add(nameArabic);

    if (description != null) {
      keywords.addAll(description!.toLowerCase().split(' '));
    }

    if (descriptionArabic != null) {
      keywords.addAll(descriptionArabic!.split(' '));
    }

    // Add related keywords based on category type
    keywords.addAll(_getRelatedKeywords());

    return keywords.where((k) => k.isNotEmpty).toList();
  }

  /// Get related keywords for better search
  List<String> _getRelatedKeywords() {
    final nameKey = name.toLowerCase();

    if (nameKey.contains('wedding')) {
      return ['marriage', 'bride', 'groom', 'ceremony', 'زفاف', 'عرس', 'عروس', 'عريس'];
    } else if (nameKey.contains('corporate')) {
      return ['business', 'meeting', 'conference', 'office', 'شركة', 'اجتماع', 'مؤتمر'];
    } else if (nameKey.contains('birthday')) {
      return ['party', 'celebration', 'cake', 'حفلة', 'عيد', 'ميلاد'];
    } else if (nameKey.contains('cultural')) {
      return ['traditional', 'heritage', 'art', 'ثقافة', 'تراث', 'فن'];
    } else if (nameKey.contains('sports')) {
      return ['games', 'tournament', 'competition', 'رياضة', 'بطولة', 'منافسة'];
    } else if (nameKey.contains('exhibition')) {
      return ['trade', 'show', 'display', 'معرض', 'عرض', 'تجاري'];
    }

    return [];
  }

  // ========== Update Methods ==========

  /// Update basic information
  CategoryModel updateInfo({
    String? name,
    String? nameArabic,
    String? description,
    String? descriptionArabic,
    String? iconUrl,
    String? imageUrl,
  }) {
    return copyWith(
      name: name ?? this.name,
      nameArabic: nameArabic ?? this.nameArabic,
      description: description ?? this.description,
      descriptionArabic: descriptionArabic ?? this.descriptionArabic,
      iconUrl: iconUrl ?? this.iconUrl,
      imageUrl: imageUrl ?? this.imageUrl,
      updatedAt: DateTime.now(),
    );
  }

  /// Update order
  CategoryModel updateOrder(int newOrder) {
    return copyWith(
      order: newOrder,
      updatedAt: DateTime.now(),
    );
  }

  /// Toggle active status
  CategoryModel toggleActive() {
    return copyWith(
      isActive: !isActive,
      updatedAt: DateTime.now(),
    );
  }

  /// Update statistics
  CategoryModel updateStatistics(CategoryStatistics newStatistics) {
    return copyWith(
      statistics: newStatistics,
      updatedAt: DateTime.now(),
    );
  }

  // ========== Copy With ==========

  CategoryModel copyWith({
    String? categoryId,
    String? name,
    String? nameArabic,
    String? description,
    String? descriptionArabic,
    String? iconUrl,
    String? imageUrl,
    bool? isActive,
    int? order,
    DateTime? createdAt,
    DateTime? updatedAt,
    CategoryStatistics? statistics,
  }) {
    return CategoryModel(
      categoryId: categoryId ?? this.categoryId,
      name: name ?? this.name,
      nameArabic: nameArabic ?? this.nameArabic,
      description: description ?? this.description,
      descriptionArabic: descriptionArabic ?? this.descriptionArabic,
      iconUrl: iconUrl ?? this.iconUrl,
      imageUrl: imageUrl ?? this.imageUrl,
      isActive: isActive ?? this.isActive,
      order: order ?? this.order,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      statistics: statistics ?? this.statistics,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CategoryModel && other.categoryId == categoryId;
  }

  @override
  int get hashCode => categoryId.hashCode;

  @override
  String toString() {
    return 'CategoryModel(categoryId: $categoryId, name: $name, isActive: $isActive)';
  }
}

// ========== Supporting Classes ==========

/// Category performance statistics
class CategoryStatistics {
  final int totalHalls;
  final int activeHalls;
  final int totalBookings;
  final int lastMonthBookings;
  final int previousMonthBookings;
  final double averageRating;
  final double totalRevenue;
  final DateTime? lastBookingDate;
  final int viewCount;

  CategoryStatistics({
    this.totalHalls = 0,
    this.activeHalls = 0,
    this.totalBookings = 0,
    this.lastMonthBookings = 0,
    this.previousMonthBookings = 0,
    this.averageRating = 0.0,
    this.totalRevenue = 0.0,
    this.lastBookingDate,
    this.viewCount = 0,
  });

  factory CategoryStatistics.fromJson(Map<String, dynamic> json) {
    return CategoryStatistics(
      totalHalls: json['totalHalls'] as int? ?? 0,
      activeHalls: json['activeHalls'] as int? ?? 0,
      totalBookings: json['totalBookings'] as int? ?? 0,
      lastMonthBookings: json['lastMonthBookings'] as int? ?? 0,
      previousMonthBookings: json['previousMonthBookings'] as int? ?? 0,
      averageRating: (json['averageRating'] as num?)?.toDouble() ?? 0.0,
      totalRevenue: (json['totalRevenue'] as num?)?.toDouble() ?? 0.0,
      lastBookingDate: DateUtils.parseISODate(json['lastBookingDate'] as String?),
      viewCount: json['viewCount'] as int? ?? 0,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'totalHalls': totalHalls,
      'activeHalls': activeHalls,
      'totalBookings': totalBookings,
      'lastMonthBookings': lastMonthBookings,
      'previousMonthBookings': previousMonthBookings,
      'averageRating': averageRating,
      'totalRevenue': totalRevenue,
      'lastBookingDate': lastBookingDate != null ? DateUtils.toISOString(lastBookingDate!) : null,
      'viewCount': viewCount,
    };
  }

  /// Get growth rate percentage
  double get growthRate {
    if (previousMonthBookings == 0) return 0.0;
    return ((lastMonthBookings - previousMonthBookings) / previousMonthBookings) * 100;
  }

  /// Get average revenue per booking
  double get averageRevenuePerBooking {
    if (totalBookings == 0) return 0.0;
    return totalRevenue / totalBookings;
  }

  /// Get hall utilization rate
  double get hallUtilizationRate {
    if (totalHalls == 0) return 0.0;
    return (activeHalls / totalHalls) * 100;
  }

  /// Update with new booking data
  CategoryStatistics addBooking({
    required double bookingValue,
    required double rating,
  }) {
    final newTotalBookings = totalBookings + 1;
    final newTotalRevenue = totalRevenue + bookingValue;
    final newAverageRating = ((averageRating * totalBookings) + rating) / newTotalBookings;

    return CategoryStatistics(
      totalHalls: totalHalls,
      activeHalls: activeHalls,
      totalBookings: newTotalBookings,
      lastMonthBookings: lastMonthBookings + 1,
      previousMonthBookings: previousMonthBookings,
      averageRating: newAverageRating,
      totalRevenue: newTotalRevenue,
      lastBookingDate: DateTime.now(),
      viewCount: viewCount,
    );
  }

  /// Increment view count
  CategoryStatistics incrementViewCount() {
    return CategoryStatistics(
      totalHalls: totalHalls,
      activeHalls: activeHalls,
      totalBookings: totalBookings,
      lastMonthBookings: lastMonthBookings,
      previousMonthBookings: previousMonthBookings,
      averageRating: averageRating,
      totalRevenue: totalRevenue,
      lastBookingDate: lastBookingDate,
      viewCount: viewCount + 1,
    );
  }
}

/// Category trend enum
enum CategoryTrend {
  growing,
  declining,
  stable,
}

/// Category sort options
enum CategorySortOption {
  name,
  nameArabic,
  order,
  popularity,
  hallCount,
  totalBookings,
  averageRating,
  createdAt,
}

/// Extension for category sort options
extension CategorySortOptionExtension on CategorySortOption {
  String getDisplayName(String? languageCode) {
    final isArabic = languageCode == 'ar';

    switch (this) {
      case CategorySortOption.name:
        return isArabic ? 'الاسم' : 'Name';
      case CategorySortOption.nameArabic:
        return isArabic ? 'الاسم العربي' : 'Arabic Name';
      case CategorySortOption.order:
        return isArabic ? 'الترتيب' : 'Order';
      case CategorySortOption.popularity:
        return isArabic ? 'الشعبية' : 'Popularity';
      case CategorySortOption.hallCount:
        return isArabic ? 'عدد القاعات' : 'Hall Count';
      case CategorySortOption.totalBookings:
        return isArabic ? 'إجمالي الحجوزات' : 'Total Bookings';
      case CategorySortOption.averageRating:
        return isArabic ? 'متوسط التقييم' : 'Average Rating';
      case CategorySortOption.createdAt:
        return isArabic ? 'تاريخ الإنشاء' : 'Created Date';
    }
  }
}

/// Category filter options
class CategoryFilter {
  final bool? isActive;
  final CategoryTrend? trend;
  final int? minHallCount;
  final double? minRating;
  final DateTime? createdAfter;
  final DateTime? createdBefore;

  CategoryFilter({
    this.isActive,
    this.trend,
    this.minHallCount,
    this.minRating,
    this.createdAfter,
    this.createdBefore,
  });

  /// Check if category matches this filter
  bool matches(CategoryModel category) {
    if (isActive != null && category.isActive != isActive) {
      return false;
    }

    if (trend != null && category.trend != trend) {
      return false;
    }

    if (minHallCount != null && category.hallCount < minHallCount!) {
      return false;
    }

    if (minRating != null && (category.statistics?.averageRating ?? 0.0) < minRating!) {
      return false;
    }

    if (createdAfter != null && category.createdAt.isBefore(createdAfter!)) {
      return false;
    }

    if (createdBefore != null && category.createdAt.isAfter(createdBefore!)) {
      return false;
    }

    return true;
  }

  /// Check if filter has any active criteria
  bool get hasActiveCriteria {
    return isActive != null ||
        trend != null ||
        minHallCount != null ||
        minRating != null ||
        createdAfter != null ||
        createdBefore != null;
  }

  /// Get active criteria count
  int get activeCriteriaCount {
    int count = 0;
    if (isActive != null) count++;
    if (trend != null) count++;
    if (minHallCount != null) count++;
    if (minRating != null) count++;
    if (createdAfter != null) count++;
    if (createdBefore != null) count++;
    return count;
  }
}