// models/hall/amenity_model.dart

import 'package:flutter/foundation.dart';
import '../../core/constants/firebase_constants.dart';
import '../../core/utils/validators.dart';
import '../../core/utils/date_utils.dart';
import '../../core/extensions/string_extension.dart';

/// Hall amenity model for managing available facilities
class AmenityModel {
  final String amenityId;
  final String name;
  final String nameArabic;
  final String? description;
  final String? descriptionArabic;
  final String iconUrl;
  final AmenityCategory category;
  final bool isActive;
  final bool isEssential;
  final int order;
  final DateTime createdAt;
  final DateTime updatedAt;
  final AmenityStatistics? statistics;

  AmenityModel({
    required this.amenityId,
    required this.name,
    required this.nameArabic,
    this.description,
    this.descriptionArabic,
    required this.iconUrl,
    required this.category,
    this.isActive = true,
    this.isEssential = false,
    this.order = 0,
    DateTime? createdAt,
    DateTime? updatedAt,
    this.statistics,
  }) :
        createdAt = createdAt ?? DateTime.now(),
        updatedAt = updatedAt ?? DateTime.now();

  // ========== Factory Constructors ==========

  /// Create from Firestore document
  factory AmenityModel.fromJson(Map<String, dynamic> json) {
    try {
      return AmenityModel(
        amenityId: json['amenityId'] as String,
        name: json[FirebaseConstants.nameField] as String,
        nameArabic: json[FirebaseConstants.nameArabicField] as String,
        description: json[FirebaseConstants.descriptionField] as String?,
        descriptionArabic: json[FirebaseConstants.descriptionArabicField] as String?,
        iconUrl: json[FirebaseConstants.iconField] as String,
        category: AmenityCategory.fromString(json['category'] as String),
        isActive: json[FirebaseConstants.isActiveField] as bool? ?? true,
        isEssential: json['isEssential'] as bool? ?? false,
        order: json[FirebaseConstants.orderField] as int? ?? 0,
        createdAt: DateUtils.parseISODate(json[FirebaseConstants.createdAtField] as String?) ?? DateTime.now(),
        updatedAt: DateUtils.parseISODate(json[FirebaseConstants.updatedAtField] as String?) ?? DateTime.now(),
        statistics: json['statistics'] != null
            ? AmenityStatistics.fromJson(json['statistics'] as Map<String, dynamic>)
            : null,
      );
    } catch (e) {
      debugPrint('Error parsing AmenityModel from JSON: $e');
      rethrow;
    }
  }

  /// Create new amenity
  factory AmenityModel.createNew({
    required String name,
    required String nameArabic,
    required String iconUrl,
    required AmenityCategory category,
    String? description,
    String? descriptionArabic,
    bool isEssential = false,
    int order = 0,
  }) {
    return AmenityModel(
      amenityId: '', // Will be generated by service
      name: name,
      nameArabic: nameArabic,
      description: description,
      descriptionArabic: descriptionArabic,
      iconUrl: iconUrl,
      category: category,
      isEssential: isEssential,
      order: order,
    );
  }

  /// Create default amenities for initial setup
  static List<AmenityModel> createDefaultAmenities() {
    return [
      // Essential amenities
      AmenityModel.createNew(
        name: 'Parking',
        nameArabic: 'موقف سيارات',
        iconUrl: 'assets/icons/parking.svg',
        category: AmenityCategory.parking,
        description: 'Free parking space for guests',
        descriptionArabic: 'موقف مجاني للسيارات للضيوف',
        isEssential: true,
        order: 1,
      ),
      AmenityModel.createNew(
        name: 'Air Conditioning',
        nameArabic: 'تكييف',
        iconUrl: 'assets/icons/ac.svg',
        category: AmenityCategory.comfort,
        description: 'Central air conditioning system',
        descriptionArabic: 'نظام تكييف مركزي',
        isEssential: true,
        order: 2,
      ),
      AmenityModel.createNew(
        name: 'WiFi',
        nameArabic: 'واي فاي',
        iconUrl: 'assets/icons/wifi.svg',
        category: AmenityCategory.technology,
        description: 'High-speed internet access',
        descriptionArabic: 'إنترنت عالي السرعة',
        isEssential: true,
        order: 3,
      ),

      // Audio/Visual amenities
      AmenityModel.createNew(
        name: 'Sound System',
        nameArabic: 'نظام صوتي',
        iconUrl: 'assets/icons/sound.svg',
        category: AmenityCategory.audioVisual,
        description: 'Professional audio system with microphones',
        descriptionArabic: 'نظام صوتي احترافي مع ميكروفونات',
        order: 4,
      ),
      AmenityModel.createNew(
        name: 'LED Lighting',
        nameArabic: 'إضاءة LED',
        iconUrl: 'assets/icons/lighting.svg',
        category: AmenityCategory.audioVisual,
        description: 'Adjustable LED lighting system',
        descriptionArabic: 'نظام إضاءة LED قابل للتعديل',
        order: 5,
      ),
      AmenityModel.createNew(
        name: 'Projector',
        nameArabic: 'بروجكتر',
        iconUrl: 'assets/icons/projector.svg',
        category: AmenityCategory.audioVisual,
        description: 'HD projector with screen',
        descriptionArabic: 'بروجكتر عالي الدقة مع شاشة',
        order: 6,
      ),

      // Catering amenities
      AmenityModel.createNew(
        name: 'Kitchen',
        nameArabic: 'مطبخ',
        iconUrl: 'assets/icons/kitchen.svg',
        category: AmenityCategory.catering,
        description: 'Fully equipped kitchen facility',
        descriptionArabic: 'مطبخ مجهز بالكامل',
        order: 7,
      ),
      AmenityModel.createNew(
        name: 'Catering Service',
        nameArabic: 'خدمة تموين',
        iconUrl: 'assets/icons/catering.svg',
        category: AmenityCategory.catering,
        description: 'Professional catering service available',
        descriptionArabic: 'خدمة تموين احترافية متاحة',
        order: 8,
      ),

      // Comfort amenities
      AmenityModel.createNew(
        name: 'Prayer Room',
        nameArabic: 'مصلى',
        iconUrl: 'assets/icons/prayer.svg',
        category: AmenityCategory.comfort,
        description: 'Dedicated prayer area',
        descriptionArabic: 'منطقة مخصصة للصلاة',
        order: 9,
      ),
      AmenityModel.createNew(
        name: 'Wheelchair Access',
        nameArabic: 'دخول للكراسي المتحركة',
        iconUrl: 'assets/icons/wheelchair.svg',
        category: AmenityCategory.accessibility,
        description: 'Wheelchair accessible entrance and facilities',
        descriptionArabic: 'مدخل ومرافق للكراسي المتحركة',
        order: 10,
      ),

      // Security amenities
      AmenityModel.createNew(
        name: 'Security',
        nameArabic: 'أمن',
        iconUrl: 'assets/icons/security.svg',
        category: AmenityCategory.security,
        description: '24/7 security service',
        descriptionArabic: 'خدمة أمن على مدار الساعة',
        order: 11,
      ),
      AmenityModel.createNew(
        name: 'CCTV',
        nameArabic: 'كاميرات مراقبة',
        iconUrl: 'assets/icons/cctv.svg',
        category: AmenityCategory.security,
        description: 'CCTV surveillance system',
        descriptionArabic: 'نظام مراقبة بالكاميرات',
        order: 12,
      ),

      // Entertainment amenities
      AmenityModel.createNew(
        name: 'Stage',
        nameArabic: 'منصة',
        iconUrl: 'assets/icons/stage.svg',
        category: AmenityCategory.entertainment,
        description: 'Performance stage with backdrop',
        descriptionArabic: 'منصة أداء مع خلفية',
        order: 13,
      ),
      AmenityModel.createNew(
        name: 'Dance Floor',
        nameArabic: 'أرضية رقص',
        iconUrl: 'assets/icons/dance.svg',
        category: AmenityCategory.entertainment,
        description: 'Dedicated dance floor area',
        descriptionArabic: 'منطقة مخصصة للرقص',
        order: 14,
      ),

      // Technology amenities
      AmenityModel.createNew(
        name: 'Live Streaming',
        nameArabic: 'بث مباشر',
        iconUrl: 'assets/icons/stream.svg',
        category: AmenityCategory.technology,
        description: 'Live streaming equipment and setup',
        descriptionArabic: 'معدات وإعداد البث المباشر',
        order: 15,
      ),
    ];
  }

  // ========== JSON Conversion ==========

  Map<String, dynamic> toJson() {
    return {
      'amenityId': amenityId,
      FirebaseConstants.nameField: name,
      FirebaseConstants.nameArabicField: nameArabic,
      FirebaseConstants.descriptionField: description,
      FirebaseConstants.descriptionArabicField: descriptionArabic,
      FirebaseConstants.iconField: iconUrl,
      'category': category.value,
      FirebaseConstants.isActiveField: isActive,
      'isEssential': isEssential,
      FirebaseConstants.orderField: order,
      FirebaseConstants.createdAtField: DateUtils.toISOString(createdAt),
      FirebaseConstants.updatedAtField: DateUtils.toISOString(updatedAt),
      'statistics': statistics?.toJson(),
    };
  }

  // ========== Validation ==========

  List<String> validate() {
    final errors = <String>[];

    // Validate amenity ID
    if (amenityId.isNotEmpty && !amenityId.startsWith('AMN_')) {
      errors.add('Invalid amenity ID format');
    }

    // Validate name
    final nameValidation = Validators.validateName(name, fieldName: 'Amenity name');
    if (nameValidation != null) {
      errors.add(nameValidation);
    }

    // Validate Arabic name
    final arabicNameValidation = Validators.validateArabicName(nameArabic, fieldName: 'Arabic amenity name');
    if (arabicNameValidation != null) {
      errors.add(arabicNameValidation);
    }

    // Validate icon URL
    if (iconUrl.isEmpty) {
      errors.add('Amenity icon is required');
    } else {
      final iconValidation = Validators.validateUrl(iconUrl, isRequired: true);
      if (iconValidation != null) {
        errors.add('Invalid icon URL: $iconValidation');
      }
    }

    // Validate description if provided
    if (description != null) {
      final descValidation = Validators.validateDescription(description, fieldName: 'Description', isRequired: false);
      if (descValidation != null) {
        errors.add(descValidation);
      }
    }

    return errors;
  }

  bool get isValid => validate().isEmpty;

  // ========== Computed Properties ==========

  /// Get amenity name in preferred language
  String getDisplayName(String? languageCode) {
    final isArabic = languageCode == 'ar';
    return isArabic ? nameArabic : name;
  }

  /// Get amenity description in preferred language
  String? getDisplayDescription(String? languageCode) {
    final isArabic = languageCode == 'ar';
    if (isArabic && descriptionArabic?.isNotEmpty == true) {
      return descriptionArabic;
    }
    return description;
  }

  /// Get category display name
  String getCategoryDisplayName(String? languageCode) {
    return category.getDisplayName(languageCode);
  }

  /// Get usage count across all halls
  int get usageCount => statistics?.totalUsage ?? 0;

  /// Get popularity score based on usage
  double get popularityScore {
    if (statistics == null) return 0.0;

    final stats = statistics!;

    // Calculate score based on usage and halls that offer it
    double score = 0.0;

    // Total usage (weight: 60%)
    score += (stats.totalUsage * 0.6);

    // Halls offering this amenity (weight: 30%)
    score += (stats.hallsOffering * 0.3);

    // Recent usage (weight: 10%)
    if (stats.lastUsedDate != null) {
      final daysSinceLastUse = DateTime.now().difference(stats.lastUsedDate!).inDays;
      final recentUsageScore = (30 - daysSinceLastUse.clamp(0, 30)) / 30 * 10;
      score += recentUsageScore;
    }

    return score;
  }

  /// Check if amenity is popular
  bool get isPopular => popularityScore > 20.0;

  /// Check if amenity has recent usage
  bool get hasRecentUsage {
    if (statistics?.lastUsedDate == null) return false;
    final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7));
    return statistics!.lastUsedDate!.isAfter(sevenDaysAgo);
  }

  /// Get amenity priority (essential amenities have higher priority)
  int get priority => isEssential ? 1 : 2;

  /// Get amenity badge text
  String? getAmenityBadge(String? languageCode) {
    final isArabic = languageCode == 'ar';

    if (isEssential) {
      return isArabic ? 'أساسي' : 'Essential';
    }

    if (isPopular) {
      return isArabic ? 'شائع' : 'Popular';
    }

    return null;
  }

  // ========== Search & Filter Methods ==========

  /// Check if amenity matches search query
  bool matchesSearchQuery(String query) {
    final normalizedQuery = query.toSearchFormat;

    return name.toSearchFormat.containsQuery(normalizedQuery) ||
        nameArabic.toSearchFormat.containsQuery(normalizedQuery) ||
        (description?.toSearchFormat.containsQuery(normalizedQuery) ?? false) ||
        (descriptionArabic?.toSearchFormat.containsQuery(normalizedQuery) ?? false) ||
        category.getDisplayName('en').toSearchFormat.containsQuery(normalizedQuery) ||
        category.getDisplayName('ar').toSearchFormat.containsQuery(normalizedQuery);
  }

  /// Get search keywords for this amenity
  List<String> get searchKeywords {
    final keywords = <String>[];

    keywords.add(name.toLowerCase());
    keywords.add(nameArabic);
    keywords.add(category.value);
    keywords.add(category.getDisplayName('en').toLowerCase());
    keywords.add(category.getDisplayName('ar'));

    if (description != null) {
      keywords.addAll(description!.toLowerCase().split(' '));
    }

    if (descriptionArabic != null) {
      keywords.addAll(descriptionArabic!.split(' '));
    }

    // Add related keywords
    keywords.addAll(_getRelatedKeywords());

    return keywords.where((k) => k.isNotEmpty).toList();
  }

  /// Get related keywords for better search
  List<String> _getRelatedKeywords() {
    final nameKey = name.toLowerCase();

    if (nameKey.contains('parking')) {
      return ['car', 'vehicle', 'سيارة', 'مركبة'];
    } else if (nameKey.contains('wifi') || nameKey.contains('internet')) {
      return ['internet', 'wireless', 'network', 'إنترنت', 'شبكة'];
    } else if (nameKey.contains('kitchen')) {
      return ['cooking', 'food', 'طبخ', 'طعام'];
    } else if (nameKey.contains('prayer')) {
      return ['mosque', 'islam', 'مسجد', 'إسلام', 'صلاة'];
    } else if (nameKey.contains('security')) {
      return ['safety', 'guard', 'حراسة', 'سلامة'];
    } else if (nameKey.contains('sound') || nameKey.contains('audio')) {
      return ['music', 'microphone', 'speaker', 'موسيقى', 'مايك'];
    }

    return [];
  }

  // ========== Update Methods ==========

  /// Update basic information
  AmenityModel updateInfo({
    String? name,
    String? nameArabic,
    String? description,
    String? descriptionArabic,
    String? iconUrl,
    AmenityCategory? category,
  }) {
    return copyWith(
      name: name ?? this.name,
      nameArabic: nameArabic ?? this.nameArabic,
      description: description ?? this.description,
      descriptionArabic: descriptionArabic ?? this.descriptionArabic,
      iconUrl: iconUrl ?? this.iconUrl,
      category: category ?? this.category,
      updatedAt: DateTime.now(),
    );
  }

  /// Update order
  AmenityModel updateOrder(int newOrder) {
    return copyWith(
      order: newOrder,
      updatedAt: DateTime.now(),
    );
  }

  /// Toggle active status
  AmenityModel toggleActive() {
    return copyWith(
      isActive: !isActive,
      updatedAt: DateTime.now(),
    );
  }

  /// Toggle essential status
  AmenityModel toggleEssential() {
    return copyWith(
      isEssential: !isEssential,
      updatedAt: DateTime.now(),
    );
  }

  /// Update statistics
  AmenityModel updateStatistics(AmenityStatistics newStatistics) {
    return copyWith(
      statistics: newStatistics,
      updatedAt: DateTime.now(),
    );
  }

  // ========== Copy With ==========

  AmenityModel copyWith({
    String? amenityId,
    String? name,
    String? nameArabic,
    String? description,
    String? descriptionArabic,
    String? iconUrl,
    AmenityCategory? category,
    bool? isActive,
    bool? isEssential,
    int? order,
    DateTime? createdAt,
    DateTime? updatedAt,
    AmenityStatistics? statistics,
  }) {
    return AmenityModel(
      amenityId: amenityId ?? this.amenityId,
      name: name ?? this.name,
      nameArabic: nameArabic ?? this.nameArabic,
      description: description ?? this.description,
      descriptionArabic: descriptionArabic ?? this.descriptionArabic,
      iconUrl: iconUrl ?? this.iconUrl,
      category: category ?? this.category,
      isActive: isActive ?? this.isActive,
      isEssential: isEssential ?? this.isEssential,
      order: order ?? this.order,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      statistics: statistics ?? this.statistics,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AmenityModel && other.amenityId == amenityId;
  }

  @override
  int get hashCode => amenityId.hashCode;

  @override
  String toString() {
    return 'AmenityModel(amenityId: $amenityId, name: $name, category: ${category.value})';
  }
}

// ========== Supporting Classes ==========

/// Amenity categories for better organization
enum AmenityCategory {
  parking('parking'),
  audioVisual('audio_visual'),
  catering('catering'),
  comfort('comfort'),
  accessibility('accessibility'),
  security('security'),
  entertainment('entertainment'),
  technology('technology'),
  other('other');

  const AmenityCategory(this.value);
  final String value;

  static AmenityCategory fromString(String value) {
    return AmenityCategory.values.firstWhere(
          (category) => category.value == value,
      orElse: () => AmenityCategory.other,
    );
  }

  String getDisplayName(String? languageCode) {
    final isArabic = languageCode == 'ar';

    switch (this) {
      case AmenityCategory.parking:
        return isArabic ? 'مواقف السيارات' : 'Parking';
      case AmenityCategory.audioVisual:
        return isArabic ? 'سمعي بصري' : 'Audio/Visual';
      case AmenityCategory.catering:
        return isArabic ? 'تموين' : 'Catering';
      case AmenityCategory.comfort:
        return isArabic ? 'راحة' : 'Comfort';
      case AmenityCategory.accessibility:
        return isArabic ? 'إمكانية الوصول' : 'Accessibility';
      case AmenityCategory.security:
        return isArabic ? 'أمن' : 'Security';
      case AmenityCategory.entertainment:
        return isArabic ? 'ترفيه' : 'Entertainment';
      case AmenityCategory.technology:
        return isArabic ? 'تكنولوجيا' : 'Technology';
      case AmenityCategory.other:
        return isArabic ? 'أخرى' : 'Other';
    }
  }

  String getIconName() {
    switch (this) {
      case AmenityCategory.parking:
        return 'parking';
      case AmenityCategory.audioVisual:
        return 'audio_visual';
      case AmenityCategory.catering:
        return 'catering';
      case AmenityCategory.comfort:
        return 'comfort';
      case AmenityCategory.accessibility:
        return 'accessibility';
      case AmenityCategory.security:
        return 'security';
      case AmenityCategory.entertainment:
        return 'entertainment';
      case AmenityCategory.technology:
        return 'technology';
      case AmenityCategory.other:
        return 'other';
    }
  }
}

/// Amenity usage statistics
class AmenityStatistics {
  final int totalUsage;
  final int hallsOffering;
  final int lastMonthUsage;
  final int previousMonthUsage;
  final DateTime? lastUsedDate;
  final double averageRating;

  AmenityStatistics({
    this.totalUsage = 0,
    this.hallsOffering = 0,
    this.lastMonthUsage = 0,
    this.previousMonthUsage = 0,
    this.lastUsedDate,
    this.averageRating = 0.0,
  });

  factory AmenityStatistics.fromJson(Map<String, dynamic> json) {
    return AmenityStatistics(
      totalUsage: json['totalUsage'] as int? ?? 0,
      hallsOffering: json['hallsOffering'] as int? ?? 0,
      lastMonthUsage: json['lastMonthUsage'] as int? ?? 0,
      previousMonthUsage: json['previousMonthUsage'] as int? ?? 0,
      lastUsedDate: DateUtils.parseISODate(json['lastUsedDate'] as String?),
      averageRating: (json['averageRating'] as num?)?.toDouble() ?? 0.0,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'totalUsage': totalUsage,
      'hallsOffering': hallsOffering,
      'lastMonthUsage': lastMonthUsage,
      'previousMonthUsage': previousMonthUsage,
      'lastUsedDate': lastUsedDate != null ? DateUtils.toISOString(lastUsedDate!) : null,
      'averageRating': averageRating,
    };
  }

  /// Get growth rate percentage
  double get growthRate {
    if (previousMonthUsage == 0) return 0.0;
    return ((lastMonthUsage - previousMonthUsage) / previousMonthUsage) * 100;
  }

  /// Get adoption rate (percentage of halls offering this amenity)
  double getAdoptionRate(int totalHalls) {
    if (totalHalls == 0) return 0.0;
    return (hallsOffering / totalHalls) * 100;
  }

  /// Update with new usage
  AmenityStatistics addUsage() {
    return AmenityStatistics(
      totalUsage: totalUsage + 1,
      hallsOffering: hallsOffering,
      lastMonthUsage: lastMonthUsage + 1,
      previousMonthUsage: previousMonthUsage,
      lastUsedDate: DateTime.now(),
      averageRating: averageRating,
    );
  }

  /// Update hall count offering this amenity
  AmenityStatistics updateHallCount(int newHallCount) {
    return AmenityStatistics(
      totalUsage: totalUsage,
      hallsOffering: newHallCount,
      lastMonthUsage: lastMonthUsage,
      previousMonthUsage: previousMonthUsage,
      lastUsedDate: lastUsedDate,
      averageRating: averageRating,
    );
  }
}

/// Amenity sort options
enum AmenitySortOption {
  name,
  nameArabic,
  category,
  order,
  popularity,
  usage,
  isEssential,
  createdAt,
}

/// Extension for amenity sort options
extension AmenitySortOptionExtension on AmenitySortOption {
  String getDisplayName(String? languageCode) {
    final isArabic = languageCode == 'ar';

    switch (this) {
      case AmenitySortOption.name:
        return isArabic ? 'الاسم' : 'Name';
      case AmenitySortOption.nameArabic:
        return isArabic ? 'الاسم العربي' : 'Arabic Name';
      case AmenitySortOption.category:
        return isArabic ? 'الفئة' : 'Category';
      case AmenitySortOption.order:
        return isArabic ? 'الترتيب' : 'Order';
      case AmenitySortOption.popularity:
        return isArabic ? 'الشعبية' : 'Popularity';
      case AmenitySortOption.usage:
        return isArabic ? 'الاستخدام' : 'Usage';
      case AmenitySortOption.isEssential:
        return isArabic ? 'أساسي' : 'Essential';
      case AmenitySortOption.createdAt:
        return isArabic ? 'تاريخ الإنشاء' : 'Created Date';
    }
  }
}

/// Amenity filter options
class AmenityFilter {
  final bool? isActive;
  final bool? isEssential;
  final AmenityCategory? category;
  final int? minUsage;
  final double? minRating;
  final DateTime? createdAfter;
  final DateTime? createdBefore;

  AmenityFilter({
    this.isActive,
    this.isEssential,
    this.category,
    this.minUsage,
    this.minRating,
    this.createdAfter,
    this.createdBefore,
  });

  /// Check if amenity matches this filter
  bool matches(AmenityModel amenity) {
    if (isActive != null && amenity.isActive != isActive) {
      return false;
    }

    if (isEssential != null && amenity.isEssential != isEssential) {
      return false;
    }

    if (category != null && amenity.category != category) {
      return false;
    }

    if (minUsage != null && (amenity.statistics?.totalUsage ?? 0) < minUsage!) {
      return false;
    }

    if (minRating != null && (amenity.statistics?.averageRating ?? 0.0) < minRating!) {
      return false;
    }

    if (createdAfter != null && amenity.createdAt.isBefore(createdAfter!)) {
      return false;
    }

    if (createdBefore != null && amenity.createdAt.isAfter(createdBefore!)) {
      return false;
    }

    return true;
  }

  /// Check if filter has any active criteria
  bool get hasActiveCriteria {
    return isActive != null ||
        isEssential != null ||
        category != null ||
        minUsage != null ||
        minRating != null ||
        createdAfter != null ||
        createdBefore != null;
  }

  /// Get active criteria count
  int get activeCriteriaCount {
    int count = 0;
    if (isActive != null) count++;
    if (isEssential != null) count++;
    if (category != null) count++;
    if (minUsage != null) count++;
    if (minRating != null) count++;
    if (createdAfter != null) count++;
    if (createdBefore != null) count++;
    return count;
  }
}

/// Amenity group for display organization
class AmenityGroup {
  final AmenityCategory category;
  final List<AmenityModel> amenities;

  AmenityGroup({
    required this.category,
    required this.amenities,
  });

  String getDisplayName(String? languageCode) {
    return category.getDisplayName(languageCode);
  }

  int get count => amenities.length;

  List<AmenityModel> get essentialAmenities {
    return amenities.where((a) => a.isEssential).toList();
  }

  List<AmenityModel> get popularAmenities {
    return amenities.where((a) => a.isPopular).toList();
  }

  /// Sort amenities within the group
  void sortAmenities(AmenitySortOption sortBy, {bool ascending = true}) {
    amenities.sort((a, b) {
      int result;
      switch (sortBy) {
        case AmenitySortOption.name:
          result = a.name.compareTo(b.name);
          break;
        case AmenitySortOption.nameArabic:
          result = a.nameArabic.compareTo(b.nameArabic);
          break;
        case AmenitySortOption.order:
          result = a.order.compareTo(b.order);
          break;
        case AmenitySortOption.popularity:
          result = a.popularityScore.compareTo(b.popularityScore);
          break;
        case AmenitySortOption.usage:
          result = a.usageCount.compareTo(b.usageCount);
          break;
        case AmenitySortOption.isEssential:
          result = a.priority.compareTo(b.priority);
          break;
        case AmenitySortOption.createdAt:
          result = a.createdAt.compareTo(b.createdAt);
          break;
        default:
          result = a.order.compareTo(b.order);
      }
      return ascending ? result : -result;
    });
  }
}

/// Utility class for grouping amenities
class AmenityGrouper {
  /// Group amenities by category
  static List<AmenityGroup> groupByCategory(List<AmenityModel> amenities) {
    final groups = <AmenityCategory, List<AmenityModel>>{};

    for (final amenity in amenities) {
      groups.putIfAbsent(amenity.category, () => []).add(amenity);
    }

    return groups.entries
        .map((entry) => AmenityGroup(category: entry.key, amenities: entry.value))
        .toList();
  }

  /// Group amenities by essential status
  static Map<String, List<AmenityModel>> groupByEssential(List<AmenityModel> amenities) {
    final essential = amenities.where((a) => a.isEssential).toList();
    final optional = amenities.where((a) => !a.isEssential).toList();

    return {
      'essential': essential,
      'optional': optional,
    };
  }

  /// Group amenities by popularity
  static Map<String, List<AmenityModel>> groupByPopularity(List<AmenityModel> amenities) {
    final popular = amenities.where((a) => a.isPopular).toList();
    final others = amenities.where((a) => !a.isPopular).toList();

    return {
      'popular': popular,
      'others': others,
    };
  }
}